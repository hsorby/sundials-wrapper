
set(SWIG_INTERFACE_SRCS
    cvode.i
    cvode_ls.i
    nvector_serial.i
    sunlinsol_dense.i
    sundials_context.i
    sunmatrix_dense.i
    sundials_matrix.i
    sundials_types.i
    kinsol.i
    kinsol_ls.i
    sundials_nvector.i
)

get_target_property(_SUNDIALS_INCLUDE_DIRS SUNDIALS::generic_shared INTERFACE_INCLUDE_DIRECTORIES)

set_source_files_properties(${SWIG_INTERFACE_SRCS} PROPERTIES
  INCLUDE_DIRECTORIES "${_SUNDIALS_INCLUDE_DIRS}"
)

# Put the Intermediary files generated by SWIG into their own directory.
set(SWIG_GENERATED_INTERMEDIARIES_FILES_DIR ${CMAKE_CURRENT_BINARY_DIR}/swig_intermediaries)

# Set the location of the libcellml Python package directory.
set(_PYTHON_PACKAGE_DIR ${CMAKE_CURRENT_BINARY_DIR}${CONFIG_DIR_SUFFIX}/sundials)

foreach(SWIG_INTERFACE_SRC ${SWIG_INTERFACE_SRCS})
  get_filename_component(MODULE_BASENAME ${SWIG_INTERFACE_SRC} NAME_WE)
  set(MODULE_TARGET ${MODULE_BASENAME}_interface)
  swig_add_library(${MODULE_TARGET}
    LANGUAGE python
    OUTPUT_DIR ${_PYTHON_PACKAGE_DIR}
    OUTFILE_DIR ${SWIG_GENERATED_INTERMEDIARIES_FILES_DIR}
    SOURCES ${SWIG_INTERFACE_SRC}
  )
  target_link_libraries(${MODULE_TARGET} PRIVATE SUNDIALS::nvecserial_shared SUNDIALS::cvode_shared SUNDIALS::kinsol_shared)

  if (APPLE)
    # Specifically allow dynamic lookup, here we are really targetting Python symbols.
    #set_target_properties(${MODULE_TARGET} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
    # But, we do need to know about the Python include directories.
    target_include_directories(${MODULE_TARGET} PRIVATE ${Python_INCLUDE_DIRS})
    target_link_libraries(${MODULE_TARGET} PRIVATE Python::Module)
  elseif (UNDEFINED_SYMBOLS_ALLOWED)
    # Linker allows undefined symbols, so let's not link Python.
    # But, we do need to know about the Python include directories.
    target_include_directories(${MODULE_TARGET} PRIVATE ${Python_INCLUDE_DIRS})
  else()
    target_link_libraries(${MODULE_TARGET} PRIVATE Python::Module)
  endif()
  # Disable use of Debug Python libraries when not present on Windows
  # See http://stackoverflow.com/questions/11311877/creating-a-dll-from-a-wrapped-cpp-file-with-swig
  if(WIN32)
    if(NOT PYTHON_DEBUG_LIBRARY)
      target_compile_definitions(${MODULE_TARGET} PRIVATE $<$<CONFIG:Debug>:SWIG_PYTHON_INTERPRETER_NO_DEBUG>)
    endif()
  endif()
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"
     OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    set_target_properties(${MODULE_TARGET} PROPERTIES
      COMPILE_OPTIONS "-Wno-deprecated-declarations"
    )
  endif()
  if(APPLE)
    set(RPATH_ORIGIN "@loader_path/.")
  elseif(UNIX)
    set(RPATH_ORIGIN "\$ORIGIN")
  else()
    set(RPATH_ORIGIN "no_rpath")
  endif()
  set_target_properties(${MODULE_TARGET} PROPERTIES
    CXX_VISIBILITY_PRESET hidden
    INSTALL_RPATH "${RPATH_ORIGIN}"
    RUNTIME_OUTPUT_DIRECTORY ${_PYTHON_PACKAGE_DIR}
    LIBRARY_OUTPUT_DIRECTORY ${_PYTHON_PACKAGE_DIR}
  )
endforeach()
